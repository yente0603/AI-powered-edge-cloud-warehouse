# config/settings.yaml

# 攝影機設定
camera:
  source: 10             # 攝影機設備 ID (e.g., 0, 10 for v4l2)
  width: 3840            # 幀寬度
  height: 2140            # 幀高度
  codec: "MJPG"          # 攝影機編碼 (e.g., MJPG for better performance)

# AWS 設定
aws:
  region: ""  # AWS Region (e.g., us-east-1)
  # 憑證設定 (請選擇一種方式，建議使用 IAM Role for IoT Thing)
  # 如果使用 Access Key/Secret Key (不推薦用於生產環境)，請取消註解並填寫
  access_key_id: ""
  secret_access_key: ""
  # 如果使用 profile (開發方便)，請取消註解並填寫
  # profile_name: "your-aws-profile"

  # S3 設定
  s3:
    bucket_name: "" # S3 儲存桶名稱
    # upload_folder: "" # 上傳到 S3 的檔案夾路徑 (結尾需包含斜線)
    s3_face_recognition_folder: "" # 用於人臉識別的影像
    s3_cargo_checkin_folder: "" # 用於貨物入庫記錄的影像
    upload_threads: 2        # S3 上傳執行緒數量
    upload_queue_maxsize: 10 # S3 上傳佇列最大長度

  # AWS IoT Core 設定
  iot:
    endpoint: "" # AWS IoT Core Endpoint URL
    thing_name: ""      # IoT Thing 名稱
    # 證書路徑 (相對於 run.sh 執行目錄)
    cert_path: "certs/certificate.pem.crt" # 設備證書檔案路徑
    pri_key_path: "certs/private.pem.key"  # 設備私鑰檔案路徑
    root_ca_path: "certs/AmazonRootCA1.pem"    # AWS Root CA 證書檔案路徑 (AmazonRootCA1.pem)
    # MQTT Topic 設定
    event_topic: "icam/{thing_name}/events" # 發布事件的 Topic
    command_topic: "icam/{thing_name}/commands" # 訂閱命令的 Topic
    # 新增：訂閱結果的 Topic
    result_topic: "icam/{thing_name}/recognition_results"
    cargo_result_topic: "icam/{thing_name}/cargo_processing_results"

# 模型設定 (邊緣端只保留物件偵測)
models:
  object_detection:
    built_in_model_name: "ssd-mobilenet-v2"
    threshold: 0.5
    class_mapping:
      1: "person"
      # 添加貨物類別，例如 ssd-mobilenet-v2 偵測的 "cup" (ID 47) 或 "box"
      # 請根據您的模型和實際場景調整 class ID 和名稱
      41: "cargo_cup" # 範例：假設 class ID 47 是杯子，作為一種貨物
      # 或者更通用的類別，如果模型能偵測到的話
      # 17: "cargo_potted_plant" # 範例：盆栽 (可能是某些倉儲的物品)
      # 根據需要添加更多可能的貨物類別
      73: "book" # 書籍
      # ...
    # 如果有多種貨物類型，可以在 CargoDetector 中根據這些 class_mapping 進行處

# 捕獲管理器設定
capture:
  frame_buffer_size: 15 # 幀緩衝區大小 (儲存最近多少幀，例如 15 幀大約是 0.5 秒@30FPS)
  # capture_delay_sec: 0.1 # 可選：事件觸發後，等待多少秒再從緩衝區選幀 (給攝影機反應時間)
  # capture_frames_after_trigger: 5 # 可選：事件觸發後，再緩衝多少幀用於選取

# ... 其他設定 ...

# 偵測器設定
detectors:
  person:
    enabled: true
    class_name: "person"
    cooldown_seconds: 10
    alert_on_person_detection: true # 偵測到人物時觸發雲端識別

  cargo:
    enabled: true
    # 可以指定 CargoDetector 需要監控哪些 class_mapping 中的貨物類別
    # 如果不指定，就處理所有 class_mapping 中非 "person" 的類別
    cargo_class_names: ["cargo_cup", "book"] # 範例：只處理這兩類貨物

    cooldown_seconds: 30 # 貨物事件冷卻時間 (例如，同一個區域的貨物異常，30 秒內只報一次)

    # 新增：只有當人臉識別結果中的 Person ID 在這個列表中時，才啟用貨物偵測邏輯
    allowed_person_ids: ["Nick", "YC", "Yen"] # <-- 填寫您的員工 ID

    # 新增：識別結果的有效時間 (秒)。只有在最新識別結果的時間戳距離現在不超過這個值時才有效
    recognition_result_validity_sec: 15 # 預設 15 秒內收到的識別結果才有效

    # 新增：貨物偵測的感興趣區域 (ROI) - [x1, y1, x2, y2] (左上角和右下角座標)
    # 預設在畫面左下角 (例如，佔整個畫面的下半部分寬度的左邊一半)
    # 請根據您的攝影機分辨率和實際場景調整這些像素座標
    cargo_roi: [] # [0, 360, 640, 720] # 範例：假設分辨率 1280x720，這裡是左下角 640x360 的區域

    # 新增：是否啟用 OCR 作為 QR Code 備案
    enable_ocr_fallback: true

# 事件管理設定
events:
  default_cooldown_seconds: 5 # 所有事件的預設冷卻時間 (如果偵測器未設定)

# 顯示設定
display:
  enabled: true             # 是否在本地顯示影像
  max_width: 1080            # 顯示視窗最大寬度
  max_height: 720           # 顯示視窗最大高度